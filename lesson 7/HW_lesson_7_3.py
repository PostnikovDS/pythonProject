# 3.
# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()),
# вычитание (__sub__()),
# умножение (__mul__()),
# деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки.
# Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(),
# принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****...,
# где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:

    def __init__(self, cells):
        self.cells = cells

    def __add__(self, other):
        return self.cells + other.cells

    def __sub__(self, other):
        result = self.cells - other.cells
        if result > 0:
            return result
        else:
            return str('разность количества ячеек двух клеток меньше нуля')

    def __mul__(self, other):
        return self.cells * other.cells

    def __floordiv__(self, other):
        return self.cells // other.cells

    def make_order(self, cells_row):
        result = ''
        number = '*' * self.cells
        x = 1
        i = self.cells % cells_row
        while x <= self.cells - i:
            result += number[:cells_row] + '\n'
            x += cells_row
        result = result + ('*' * i)
        return result


cell_1 = Cell(24)
print(f'В состав первой клетки входит {cell_1.cells} ячеек')
cell_2 = Cell(31)
print(f'В состав второй клетки входит {cell_2.cells} ячеек')
print(f'сумма ячеек в клетках {cell_1 + cell_2}')
print(cell_1 - cell_2)
cell_3 = Cell(cell_1 * cell_2)
print(f'третья клетка {cell_3} почему-то странно выходит')
print(f'третья клетка — результат умножения первых двух клеток имеет в составе {cell_3.cells} ячеек')
cell_4 = Cell(cell_2 // cell_1)
print(f'четвертая клетка {cell_4} тоже странная')
print(f'состав четвертой клетки — результат целочисленного деления 2-й клетки на 1-ю: {cell_4.cells}')
print(f'Первая клетка: \n{cell_1.make_order(5)}')
print('------------------')
print(f'Вторая клетка: \n{cell_2.make_order(5)}')
